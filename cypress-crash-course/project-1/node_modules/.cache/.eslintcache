[{"D:\\Cypress\\cypress-crash-course\\project-1\\src\\index.tsx":"1","D:\\Cypress\\cypress-crash-course\\project-1\\src\\reportWebVitals.ts":"2","D:\\Cypress\\cypress-crash-course\\project-1\\src\\App.tsx":"3","D:\\Cypress\\cypress-crash-course\\project-1\\src\\components\\Accomplishment\\Accomplishment.tsx":"4","D:\\Cypress\\cypress-crash-course\\project-1\\src\\components\\SideNav\\SideNav.tsx":"5","D:\\Cypress\\cypress-crash-course\\project-1\\src\\components\\Elements\\Elements.tsx":"6","D:\\Cypress\\cypress-crash-course\\project-1\\src\\components\\Habit\\Habit.tsx":"7","D:\\Cypress\\cypress-crash-course\\project-1\\src\\components\\HabitCard\\HabitCard.tsx":"8","D:\\Cypress\\cypress-crash-course\\project-1\\src\\components\\Modal\\Modal.tsx":"9"},{"size":517,"mtime":1649272139292,"results":"10","hashOfConfig":"11"},{"size":440,"mtime":1649272139293,"results":"12","hashOfConfig":"11"},{"size":981,"mtime":1649272139287,"results":"13","hashOfConfig":"11"},{"size":4255,"mtime":1649272139288,"results":"14","hashOfConfig":"11"},{"size":725,"mtime":1649272139291,"results":"15","hashOfConfig":"11"},{"size":2003,"mtime":1649272139288,"results":"16","hashOfConfig":"11"},{"size":980,"mtime":1649272139289,"results":"17","hashOfConfig":"11"},{"size":1402,"mtime":1649272139290,"results":"18","hashOfConfig":"11"},{"size":1912,"mtime":1649272139290,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"g3b9oq",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},"D:\\Cypress\\cypress-crash-course\\project-1\\src\\index.tsx",[],"D:\\Cypress\\cypress-crash-course\\project-1\\src\\reportWebVitals.ts",[],"D:\\Cypress\\cypress-crash-course\\project-1\\src\\App.tsx",["43","44"],"import logo from './logo.svg';\r\nimport './App.css';\r\nimport SideNav from './components/SideNav/SideNav';\r\nimport Habit from \"./components/Habit/Habit\"\r\nimport Accomplishment from './components/Accomplishment/Accomplishment';\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\"\r\nimport Rewards from './components/Rewards/Rewards';\r\nimport Elements from './components/Elements/Elements';\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <div className=\"App\">\r\n        <div className=\"App-container\">\r\n          <SideNav />\r\n          <Switch>\r\n            <Route strict exact path=\"/habits\" component={Habit} />\r\n            <Route strict exact path=\"/accomplishments\" component={Accomplishment} />\r\n            {/* <Route strict exact path=\"/rewards\" component={Rewards} /> */}\r\n            <Route strict exact path=\"/elements\" component={Elements} />\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\Cypress\\cypress-crash-course\\project-1\\src\\components\\Accomplishment\\Accomplishment.tsx",["45"],"import React, { useState } from 'react'\r\nimport \"./Accomplishment.css\"\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport confetti from \"../../svg/confetti.svg\"\r\n\r\nfunction Accomplishment() {\r\n\r\n    const [title, setTitle] = useState(\"\")\r\n    const [accomplishment, setAccomplishment] = useState(\"\")\r\n    const [valid, setValid] = useState(false);\r\n\r\n    const [showError, setShowError] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [showSuccess, setShowSuccess] = useState(false)\r\n\r\n    const handleSubmit = () => {\r\n        if(!title || !accomplishment || !valid) {\r\n            return setShowError(true)\r\n        }\r\n        setLoading(true)\r\n        setTimeout(() => {\r\n            setLoading(false);\r\n            setShowSuccess(true)\r\n        }, 3000)\r\n    }\r\n\r\n    return (\r\n        <div className=\"Accomplishment\">\r\n            <div className=\"Accomplishment__heading-container\">\r\n                <h2 className=\"Accomplishment-header\">Accomplishment</h2>\r\n            </div>\r\n            <div className=\"Accomplishment-cards-container\">\r\n                {\r\n                    (!loading && !showSuccess) && (\r\n                        <>\r\n                            <input \r\n                                className=\"Accomplishment-input\" \r\n                                placeholder=\"Title\" \r\n                                value={title}\r\n                                onChange={(e) => setTitle(e.target.value)}\r\n                                data-cy=\"accomplishment-title-input\"\r\n                            />\r\n                            <textarea \r\n                                className=\"Accomplishment-textarea\" \r\n                                placeholder=\"My accomplishment...\" \r\n                                value={accomplishment}\r\n                                onChange={(e) => setAccomplishment(e.target.value)}\r\n                                data-cy=\"accomplishment-input\"\r\n                            />\r\n                            <div className=\"Accomplishment-checkbox-container\">\r\n                                <input \r\n                                    type=\"checkbox\" \r\n                                    checked={valid} \r\n                                    onChange={(e) => setValid(e.target.checked)}\r\n                                    data-cy=\"accomplishment-checkbox\"\r\n                                />\r\n                                <p>This accomplishment is valid</p>\r\n                            </div>\r\n                            {\r\n                                showError && (\r\n                                    <div className=\"Accomplishment-error-container\">\r\n                                        <p>Complete the items above to continue</p>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                            <button className=\"Accomplishment-btn\" onClick={handleSubmit}>Submit Accomplishment</button>\r\n                        </>\r\n                    )\r\n                }\r\n                {\r\n                    (loading) && (\r\n                        <div className=\"Accomplishment-spinner-container\">\r\n                            <ClipLoader size={150} />\r\n                        </div>\r\n                    )\r\n                }\r\n                {\r\n                    (showSuccess) && (\r\n                        <div>\r\n                            <div className=\"Accomplishment-spinner-container\">\r\n                                <img src={confetti} className=\"Accomplishment-img\"/> \r\n                                <h1>This Accomplisment was Successfully Submitted</h1> \r\n                            </div>\r\n                            <button className=\"Accomplishment-btn\" onClick={() => {\r\n                                setShowSuccess(false);\r\n                                setTitle(\"\")\r\n                                setAccomplishment(\"\")\r\n                                setValid(false);\r\n                                setShowError(false)\r\n                            }}>Go Back</button>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Accomplishment\r\n","D:\\Cypress\\cypress-crash-course\\project-1\\src\\components\\SideNav\\SideNav.tsx",[],"D:\\Cypress\\cypress-crash-course\\project-1\\src\\components\\Elements\\Elements.tsx",[],"D:\\Cypress\\cypress-crash-course\\project-1\\src\\components\\Habit\\Habit.tsx",["46","47"],"import React, { useState, useEffect } from 'react'\r\nimport HabitCard from '../HabitCard/HabitCard'\r\nimport Modal from \"../Modal/Modal\"\r\nimport \"./Habit.css\"\r\nimport axios from \"axios\"\r\n\r\ntype IState = {\r\n    _id: string;\r\n    habit: string;\r\n    completed: boolean;\r\n}[]\r\n\r\nfunction Habit() {\r\n\r\n    const [habits, setHabits] = useState<IState>([]);\r\n    console.log(habits, \"habits\")\r\n\r\n    return (\r\n        <div className=\"Habit\">\r\n            <div className=\"Habit__heading-container\">\r\n                <h2 className=\"Habit-header\">Habit Checklist</h2>\r\n                <Modal \r\n                    habits={habits}\r\n                    setHabits={setHabits}\r\n                />\r\n            </div>\r\n            <div className=\"Habit-cards-container\">\r\n                {habits.map(habit => {\r\n                    return <HabitCard habit={habit} setHabits={setHabits} habits={habits}/>\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Habit\r\n","D:\\Cypress\\cypress-crash-course\\project-1\\src\\components\\HabitCard\\HabitCard.tsx",["48","49","50"],"import React, { useState } from 'react'\r\nimport \"./HabitCard.css\"\r\nimport close from \"../../svg/close.svg\"\r\nimport check from \"../../svg/check.svg\"\r\n\r\ninterface IProps {\r\n    habit: {\r\n        _id: string,\r\n        habit: string,\r\n        completed: boolean\r\n    },\r\n    habits: {\r\n        _id: string,\r\n        habit: string,\r\n        completed: boolean\r\n    }[],\r\n    setHabits: React.Dispatch<React.SetStateAction<{\r\n        _id: string,\r\n        habit: string;\r\n        completed: boolean;\r\n    }[]>>\r\n}\r\n\r\nfunction HabitCard({ habit, setHabits, habits }: IProps) {\r\n\r\n    const [complete, setComplete] = useState(false)\r\n\r\n    return (\r\n        <div className=\"HabitCard\" onClick={() => {\r\n            let newHabits = habits.map(updatedHabit => {\r\n                if(updatedHabit._id === habit._id){\r\n                    return {\r\n                        ...habit,\r\n                        completed: !habit.completed\r\n                    }\r\n                } else return updatedHabit\r\n            });\r\n            setHabits(newHabits)\r\n        }}>\r\n            <div className=\"HabitCard__completion-container\">\r\n                <img className=\"HabitCard__completion-icon\" src={habit.completed ? check : close}/>\r\n            </div>\r\n            <div className=\"HabitCard__habit-container\">\r\n                {habit.habit}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HabitCard\r\n","D:\\Cypress\\cypress-crash-course\\project-1\\src\\components\\Modal\\Modal.tsx",["51"],"import { useState } from \"react\"\r\nimport { Modal, Button, InputGroup, FormControl } from \"react-bootstrap\";\r\nimport { v4 as uuid } from \"uuid\"\r\n\r\ninterface IProps {\r\n  habits: {\r\n    _id: string,\r\n    habit: string,\r\n    completed: boolean\r\n  }[],\r\n  setHabits: React.Dispatch<React.SetStateAction<{\r\n      _id: string,\r\n      habit: string;\r\n      completed: boolean;\r\n  }[]>>\r\n}\r\n\r\ntype Habit = {\r\n  _id: string,\r\n  habit: string,\r\n  completed: boolean\r\n}\r\n\r\nfunction AddModal({ habits, setHabits }: IProps) {\r\n    const [show, setShow] = useState(false);\r\n  \r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    const [habit, setHabit] = useState(\"\")\r\n\r\n    const handleAdd = async () => {\r\n      if(habit){\r\n        setHabits([\r\n          ...habits,\r\n          {\r\n            _id: uuid(),\r\n            habit,\r\n            completed: false\r\n          }\r\n        ]);\r\n        setShow(false);\r\n        setHabit(\"\")\r\n      }\r\n    }\r\n  \r\n    return (\r\n      <>\r\n        <button onClick={handleShow} className=\"Habit-add-btn\" id=\"habit-add-btn\">Add</button>\r\n  \r\n        <Modal show={show} onHide={handleClose}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Add a new habit</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <InputGroup className=\"mb-3\">\r\n              <FormControl\r\n                placeholder=\"Habit\"\r\n                onChange={(e) => {setHabit(e.target.value)}}\r\n                value={habit}\r\n              />\r\n            </InputGroup>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={handleClose}>\r\n              Close\r\n            </Button>\r\n            <Button variant=\"primary\" onClick={handleAdd}>\r\n              Save Changes\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </>\r\n    );\r\n  }\r\n  \r\nexport default AddModal",{"ruleId":"52","severity":1,"message":"53","line":1,"column":8,"nodeType":"54","messageId":"55","endLine":1,"endColumn":12},{"ruleId":"52","severity":1,"message":"56","line":7,"column":8,"nodeType":"54","messageId":"55","endLine":7,"endColumn":15},{"ruleId":"57","severity":1,"message":"58","line":81,"column":33,"nodeType":"59","endLine":81,"endColumn":85},{"ruleId":"52","severity":1,"message":"60","line":1,"column":27,"nodeType":"54","messageId":"55","endLine":1,"endColumn":36},{"ruleId":"52","severity":1,"message":"61","line":5,"column":8,"nodeType":"54","messageId":"55","endLine":5,"endColumn":13},{"ruleId":"52","severity":1,"message":"62","line":26,"column":12,"nodeType":"54","messageId":"55","endLine":26,"endColumn":20},{"ruleId":"52","severity":1,"message":"63","line":26,"column":22,"nodeType":"54","messageId":"55","endLine":26,"endColumn":33},{"ruleId":"57","severity":1,"message":"58","line":41,"column":17,"nodeType":"59","endLine":41,"endColumn":100},{"ruleId":"52","severity":1,"message":"64","line":18,"column":6,"nodeType":"54","messageId":"55","endLine":18,"endColumn":11},"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Rewards' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useEffect' is defined but never used.","'axios' is defined but never used.","'complete' is assigned a value but never used.","'setComplete' is assigned a value but never used.","'Habit' is defined but never used."]